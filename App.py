# -*- coding: utf-8 -*-
"""App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L4qlDLKumB83uJdUHBjzi1qE7pimxRGQ
"""

from tensorflow.keras.models import load_model
import joblib
import pandas as pd
import numpy as np
import shap
import google.generativeai as genai
import time

# ======implementasi .env untuk api gemini==
# from dotenv import load_dotenv
# import os

# load_dotenv()
# token = os.getenv("GEMINI_API_KEY")
# ==========================file .env================
# GEMINI_API_KEY = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"  # Ganti dengan API Key Anda

model = load_model('model_diabetes.h5')
scaler = joblib.load('scaler_diabetes.pkl')
numeric_cols = ['BMI', 'PhysHlth']
feature_names = ['HighBP', 'HighChol', 'BMI', 'HeartDiseaseorAttack', 'GenHlth', 'PhysHlth', 'DiffWalk', 'Age', 'Education', 'Income']
X_reference_scaled = joblib.load('X_reference_scaled.pkl')

def predict_diabetes(input_dict, model, scaler, numeric_cols):
    # Buat DataFrame 1 baris dari dict
    df = pd.DataFrame([input_dict])

    # Scaling hanya kolom numerik
    df_scaled = df.copy()
    df_scaled[numeric_cols] = scaler.transform(df[numeric_cols])

    # Prediksi probabilitas
    prob = model.predict(df).flatten()

    results = []
    for p in prob:
        risk_pct = p * 100
        results.append(
            f"Risiko terkena diabetes diperkirakan sekitar {risk_pct:.1f}%. "
        )
    return results, risk_pct, df_scaled, df

def shap_to_natural_language(shap_values, feature_values, feature_names):
    """
    Ubah hasil SHAP menjadi penjelasan bahasa alami.

    Parameters:
    - shap_values: list atau array SHAP values untuk 1 pasien
    - feature_values: list atau array nilai input pasien
    - feature_names: list nama fitur

    Return:
    - kalimat penjelasan (string)
    """
    feature_labels = {
        'HighBP': 'Tekanan darah tinggi',
        'HighChol': 'Kolesterol tinggi',
        'BMI': 'Indeks massa tubuh (BMI)',
        'HeartDiseaseorAttack': 'Riwayat serangan jantung',
        'GenHlth': 'Penilaian kesehatan umum',
        'PhysHlth': 'Hari tidak sehat secara fisik',
        'DiffWalk': 'Kesulitan berjalan',
        'Age': 'Kelompok usia',
        'Education': 'Tingkat pendidikan',
        'Income': 'Pendapatan'
    }

    df = pd.DataFrame({
        'feature': feature_names,
        'label': [feature_labels.get(f, f) for f in feature_names],
        'value': feature_values,
        'shap': shap_values
    })

    threshold = 0.03
    positive = df[df.shap > threshold]
    negative = df[df.shap < -threshold]

    summary = ""
    if not negative.empty:
        summary += "\nFaktor yang menurunkan risiko pasien:\n"
        for _, row in negative.iterrows():
            summary += f"- {row['label']} (nilai: {row['value']})\n"

    if not positive.empty:
        summary += "\nFaktor yang meningkatkan risiko pasien:\n"
        for _, row in positive.iterrows():
            summary += f"- {row['label']} (nilai: {row['value']})\n"

    return summary

def humanize_natural_text(natural_text):
    """
    Ubah natural_text semi-teknis menjadi narasi pengguna-ramah dengan mempertimbangkan nilai.
    """
    # Map frasa dan logika kondisional berdasarkan nilai
    label_map = {
        'Tekanan darah tinggi': {
            'high_risk': 'pasien memiliki tekanan darah tinggi',
            'low_risk': 'Tekanan darah pasien normal'
        },
        'Kolesterol tinggi': {
            'high_risk': 'pasien memiliki kolesterol tinggi',
            'low_risk': 'Kadar kolesterol pasien normal'
        },
        'Indeks massa tubuh': {
            'high_risk': 'Indeks massa tubuh pasien tergolong tinggi (overweight/obesitas)',
            'low_risk': 'Indeks massa tubuh pasien normal'
        },
        'Riwayat penyakit jantung': {
            'high_risk': 'pasien memiliki riwayat penyakit jantung',
            'low_risk': 'Riwayat penyakit jantung pasien normal'
        },
        'Penilaian kesehatan umum': {
            'high_risk': 'Kesehatan umum pasien kurang optimal',
            'low_risk': 'Kesehatan umum pasien cukup baik'
        },
        'Kondisi kesehatan umum': {
            'high_risk': 'Kesehatan umum pasien kurang optimal',
            'low_risk': 'Kesehatan umum pasien cukup baik'
        },
        'Hari tidak sehat': {
            'high_risk': 'pasien mengalami hari tidak sehat yang cukup',
            'low_risk': 'Hari tidak sehat pasien normal'
        },
        'Kesulitan berjalan': {
            'high_risk': 'pasien mengalami kesulitan berjalan atau naik tangga',
            'low_risk': 'Kesulitan berjalan pasien normal'
        },
        'Kelompok usia': {
            'high_risk': 'Usia pasien tergolong lebih tua (risiko lebih tinggi)',
            'low_risk': 'Usia pasien masih tergolong muda'
        },
        'Tingkat pendidikan': {
            'high_risk': 'Tingkat pendidikan pasien relatif rendah (risiko lebih tinggi)',
            'low_risk': 'Tingkat pendidikan pasien cukup tinggi'
        },
        'Pendapatan': {
            'high_risk': 'Pendapatan pasien mungkin belum terlalu tinggi (risiko lebih tinggi)',
            'low_risk': 'Pendapatan pasien cukup tinggi'
        }
    }

    lines = natural_text.strip().split('\n')
    output = {
        'meningkatkan_risiko': [],
        'menurunkan_risiko': []
    }

    current_section = None

    for line in lines:
        line = line.strip()
        if not line:
            continue

        if "Faktor yang menurunkan risiko pasien" in line:
            current_section = 'menurunkan_risiko'
            continue
        elif "Faktor yang meningkatkan risiko pasien" in line:
            current_section = 'meningkatkan_risiko'
            continue
        elif line.startswith("-"):
            # Ekstrak faktor dan nilai
            parts = line[1:].strip().split("(nilai:")
            factor = parts[0].split("(")[0].strip()
            value = float(parts[1].replace(")", "").strip()) if len(parts) > 1 else None

            # Tentukan apakah faktor ini high_risk atau low_risk
            risk_type = 'high_risk' if current_section == 'meningkatkan_risiko' else 'low_risk'

            # Cari padanan yang manusiawi
            for phrase, mappings in label_map.items():
                if phrase in factor:
                    output[current_section].append(f"- {mappings[risk_type]}.")
                    break
            else:
                # Jika tidak ada di mapping, gunakan teks asli
                output[current_section].append(f"- {factor}.")

    # Gabungkan hasil
    result = []
    if output['menurunkan_risiko']:
        result.append("Faktor yang menurunkan risiko pasien:")
        result.extend(output['menurunkan_risiko'])
    if output['meningkatkan_risiko']:
        result.append("\nFaktor yang meningkatkan risiko pasien:")
        result.extend(output['meningkatkan_risiko'])

    return "\n".join(result)

def diabetes_assistant(user_input, api_key="AIzaSyAJ6dPeuAGSEO0WJLPmC_EwKiCEITdWJl8"):
    """
    Fungsi untuk memberikan konsultasi diabetes menggunakan Gemini AI

    Args:
        user_input (str): Input/pertanyaan dari user
        api_key (str): API Key untuk Gemini

    Returns:
        tuple: (response_text, execution_time)
    """
    start_time = time.time()

    try:
        # Konfigurasi API Gemini
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-1.5-flash')

        # Template prompt untuk diabetes assistant
        prompt = f"""
          Anda adalah asisten kesehatan digital. Hanya jawab pertanyaan seputar **diabetes**:
          [Data pasien dan/atau pertanyaan pasien sebagai berikut:
          {user_input}]
          PERINGATAN : Tolak menjawab topik di luar terkait data pasien
          Berikan saran gaya hidup untuk menurunkan risiko diabetes dan menjaga resiko diabetes tetap aman dari data pasien yang diberikan, jika tidak ada Tolak menjawab topik di luar terkait data pasien dengan kalimat [maaf, model tidak merespon] (gunakan bahasa Indonesia yang sopan dan mudah dimengerti).
          """

        # Generate response
        response = model.generate_content(
            prompt,
            generation_config={
                "temperature": 0.7,
                "top_p": 0.9,
                "max_output_tokens": 2550,
            }
        )

        end_time = time.time()
        elapsed_time = end_time - start_time

        return response.text, elapsed_time

    except Exception as e:
        end_time = time.time()
        elapsed_time = end_time - start_time
        return f"Error saat memanggil API: {str(e)}", elapsed_time

# Contoh input dictionary
input_example = {
    'HighBP': 1,
    'HighChol': 0,
    'BMI': 27.5,
    'HeartDiseaseorAttack': 0,
    'GenHlth': 3,
    'PhysHlth': 2,
    'DiffWalk': 0,
    'Age': 4,
    'Education': 4,
    'Income_Group': 3
}

result, risk_pct, X_input_scaled, X_input = predict_diabetes(input_example, model, scaler, numeric_cols)
explainer = shap.KernelExplainer(lambda x: model.predict(x).flatten(), X_reference_scaled.to_numpy())
shap_values_raw = explainer.shap_values(X_input_scaled.to_numpy(), nsamples=100)[0]
natural_text = shap_to_natural_language(shap_values_raw, X_input.iloc[0].to_numpy(), feature_names)
human_text = humanize_natural_text(natural_text)
humanic_respon, time_execute = diabetes_assistant(human_text)

print(humanic_respon)
print(f"{time_execute:.2f} detik")

print(f"Score terkena diabetes: {risk_pct:.2f}%")